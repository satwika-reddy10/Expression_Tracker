{"ast":null,"code":"// client/src/services/api.js\n\nimport axios from \"axios\";\nconst API_URL = \"http://localhost:5000\";\nexport const uploadImages = async (screenshot, webcamImage, sessionId) => {\n  try {\n    if (!sessionId) throw new Error(\"Session ID is required for image upload.\");\n    const formData = new FormData();\n    formData.append(\"screenshot\", screenshot);\n    formData.append(\"webcam\", webcamImage);\n    formData.append(\"sessionId\", sessionId);\n    const config = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    };\n    const response = await axios.post(`${API_URL}/upload?currentSessionId=${sessionId}`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error uploading images:\", error);\n    throw error;\n  }\n};\nexport const fetchSessions = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/sessions`);\n    // Assuming the response data has a 'sessions' property with an array of session IDs\n    return response.data.sessions;\n  } catch (error) {\n    console.error(\"Error fetching sessions:\", error);\n    throw error;\n  }\n};\nexport const analyzeSession = async sessionId => {\n  try {\n    const response = await axios.get(`${API_URL}/analyze/${sessionId}`);\n\n    // Check if the response data has the expected structure\n    if (response.data.imageAnalyses && response.data.overallAnalysis) {\n      return {\n        imageAnalyses: response.data.imageAnalyses,\n        overallEmotions: response.data.overallAnalysis.emotions\n      };\n    } else {\n      console.error(\"Invalid response data structure:\", response.data);\n      throw new Error(\"Invalid response data structure\");\n    }\n  } catch (error) {\n    console.error(\"Error analyzing session:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","uploadImages","screenshot","webcamImage","sessionId","Error","formData","FormData","append","config","headers","response","post","data","error","console","fetchSessions","get","sessions","analyzeSession","imageAnalyses","overallAnalysis","overallEmotions","emotions"],"sources":["C:/Users/satwika/Desktop/ET/Expression_Tracker/client/src/services/api.js"],"sourcesContent":["// client/src/services/api.js\r\n\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5000\";\r\n\r\nexport const uploadImages = async (screenshot, webcamImage, sessionId) => {\r\n  try {\r\n    if (!sessionId) throw new Error(\"Session ID is required for image upload.\");\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"screenshot\", screenshot);\r\n    formData.append(\"webcam\", webcamImage);\r\n    formData.append(\"sessionId\", sessionId);\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    };\r\n\r\n    const response = await axios.post(\r\n      `${API_URL}/upload?currentSessionId=${sessionId}`,\r\n      formData,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error uploading images:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchSessions = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/sessions`);\r\n    // Assuming the response data has a 'sessions' property with an array of session IDs\r\n    return response.data.sessions;\r\n  } catch (error) {\r\n    console.error(\"Error fetching sessions:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const analyzeSession = async (sessionId) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/analyze/${sessionId}`);\r\n\r\n    // Check if the response data has the expected structure\r\n    if (response.data.imageAnalyses && response.data.overallAnalysis) {\r\n      return {\r\n        imageAnalyses: response.data.imageAnalyses,\r\n        overallEmotions: response.data.overallAnalysis.emotions,\r\n      };\r\n    } else {\r\n      console.error(\"Invalid response data structure:\", response.data);\r\n      throw new Error(\"Invalid response data structure\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error analyzing session:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB;AAEvC,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,UAAU,EAAEC,WAAW,EAAEC,SAAS,KAAK;EACxE,IAAI;IACF,IAAI,CAACA,SAAS,EAAE,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;IAE3E,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,YAAY,EAAEN,UAAU,CAAC;IACzCI,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEL,WAAW,CAAC;IACtCG,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEJ,SAAS,CAAC;IAEvC,MAAMK,MAAM,GAAG;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC;IAED,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,IAAI,CAC/B,GAAGZ,OAAO,4BAA4BI,SAAS,EAAE,EACjDE,QAAQ,EACR;MACEI,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CACF,CAAC;IACD,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMZ,KAAK,CAACkB,GAAG,CAAC,GAAGjB,OAAO,WAAW,CAAC;IACvD;IACA,OAAOW,QAAQ,CAACE,IAAI,CAACK,QAAQ;EAC/B,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMK,cAAc,GAAG,MAAOf,SAAS,IAAK;EACjD,IAAI;IACF,MAAMO,QAAQ,GAAG,MAAMZ,KAAK,CAACkB,GAAG,CAAC,GAAGjB,OAAO,YAAYI,SAAS,EAAE,CAAC;;IAEnE;IACA,IAAIO,QAAQ,CAACE,IAAI,CAACO,aAAa,IAAIT,QAAQ,CAACE,IAAI,CAACQ,eAAe,EAAE;MAChE,OAAO;QACLD,aAAa,EAAET,QAAQ,CAACE,IAAI,CAACO,aAAa;QAC1CE,eAAe,EAAEX,QAAQ,CAACE,IAAI,CAACQ,eAAe,CAACE;MACjD,CAAC;IACH,CAAC,MAAM;MACLR,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEH,QAAQ,CAACE,IAAI,CAAC;MAChE,MAAM,IAAIR,KAAK,CAAC,iCAAiC,CAAC;IACpD;EACF,CAAC,CAAC,OAAOS,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}